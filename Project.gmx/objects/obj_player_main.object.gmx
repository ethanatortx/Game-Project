<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_main_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize values
global.playerSpeed = scrDeltaApply(2, true);
global.playerState = 'move';

global.moveModX = 1;
global.moveModY = 1;

global.walkSpeedMod = 0.6;

cfg_defaultbinds();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// define player movement textures in array

global.playerSprArr = undefined;
global.playerSprArr[0] = spr_main_down;
global.playerSprArr[1] = spr_main_up;
global.playerSprArr[2] = spr_main_left;
global.playerSprArr[3] = spr_main_right;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement

// only allow walking if specified
if (global.playerState = 'move') {
    event_user(0);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set dynamic depth
depth = -y; // makes its depth be lower than that of the ones infront of it
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do player movement

var hspd = global.playerSpeed * global.moveModX;
var vspd = global.playerSpeed * global.moveModY;
var runAnimSpd = scrDeltaApply(.5,true);

global.axisDeadZone = 0.2;
var walkThreshold = 0.6;
var device = 0;
var gpinput = false;

var pad_num = gamepad_get_device_count();
var gp = undefined; // initialize var gp as a local variable for future use

for (i = 0; i &lt; pad_num; i++) {
    gp[i] = gamepad_is_connected(i); // get array of devices and whether or not they are gamepad inputs
}

if (gp[device]) { // if specified device slot is gamepad or not
    var gpinput = true;
} else {
    var gpinput = false;
}

if (gpinput) {
    // gamepad axis assignment
    gamepad_set_axis_deadzone(device,0.2)
    vaxis = gamepad_axis_value(device, gp_axislv);
    haxis = gamepad_axis_value(device, gp_axislh);

    // check if controller input exists:
    if (haxis != 0 or vaxis != 0) {
        scrMoveGamepad(hspd,vspd,haxis,vaxis,walkThreshold);
    } else {
        direction = 0;
        speed = 0;
        angle = 0;
    }

} else if (!gpinput) {
    // keyboard key array assignment
    var keyArr;
    keyArr[0] = global.keybinds[0]; // left
    keyArr[1] = global.keybinds[1]; // right
    keyArr[2] = global.keybinds[2]; // up
    keyArr[3] = global.keybinds[3]; // down
    
    scrMoveKeyboard(hspd,vspd,keyArr);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create game quit object &lt;TESTING ONLY&gt;
instance_create(0,0,obj_quitgame);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
