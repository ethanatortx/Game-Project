<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>time_control_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize globals and instance vars

// The stack for backwards time skipping is set up like this:
//      ... { player x pos, player y pos, player health } ...
// Data is pushed in ordered sets of three.
// When the skip is called, the player is pulled through the
//      moments in reverse order.
// The rest of the world is unchanged.

// this stuff will be extended with ability unlocks
// for now Im going to set frequency low and duration
// high for testing
time_shift_duration = 3;
snapshot_frequency = 15;

// quantity of snapshots (precision of recall)
snapshot_count = time_shift_duration * snapshot_frequency;

// grid used to hold snap data
time_shift_stack = ds_stack_create();

// time tracking
current_tick = 0;
// duration of shift back
shift_back_duration = 2;

// cooldown time in seconds
cooldown = 3;
// whether or not ability is on cooldown
on_cooldown = false;
// whether or not ability is active
is_active = false;

// temp health
t_health = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// delete time skip list object
ds_stack_destroy(time_shift_stack);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// trigger time skip if player presses time skip key

if((keyboard_check(ord("e")) || keyboard_check(ord("E"))) &amp;&amp; (on_cooldown != true))
{
    is_active = true;
    on_cooldown = true;
    time_shift_frequency = time_shift_duration / ds_stack_size(time_shift_stack)/3 * room_speed;
}

if(is_active)
{
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_time_shift_control</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check for frequency
if(!is_active){
    if(current_tick++ &gt;= (room_speed/snapshot_frequency))
    {
        current_tick = 0;
        scrUpdateTimeStack(time_shift_stack, time_shift_duration, snapshot_frequency, global.playerPositionX, global.playerPositionY, global.playerHealth);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// decrease cooldown

if(on_cooldown)
{
    cooldown -= global.delta;
}

if(cooldown &lt;= 0)
{
    cooldown = 0;
    on_cooldown = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// skip back in time
var nx, ny, nh;
if(ds_stack_size(time_shift_stack) &gt; 0)
{
    if(current_tick &gt;= time_shift_frequency)
    {
        current_tick = 0;
        nx = ds_stack_pop(time_shift_stack);
        ny = ds_stack_pop(time_shift_stack);
        nh = ds_stack_pop(time_shift_stack);
        if(nh &gt; t_health) t_health = nh;
        global.playerPositionX = nx;
        global.playerPositionY = ny;
    }
    else
    {
        current_tick += global.delta;
    }
}
else
{
    is_active = false;
    global.playerHealth = t_health;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
