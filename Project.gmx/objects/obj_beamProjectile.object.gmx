<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initialize variables

// damage dealt per tick to player
damage = 0;

// position beam originates from (top left corner of beam)
posX = 0; // x position
posY = 0; // y position

// angle of beam
dir = 0;

// dimensions of beam (-1 limit is unbounded)

// starting length
length = 0;
// limit on length growth
lengthLimit = -1;
// spd of length growth
lSpd = 1;

// starting width
width = 0;
// limit on width growth
widthLimit = 20;
// speed of width
wSpd = 1;

// colours and alphas of beam

// color of the inside of the projected beam
colorInside = make_colour_rgb(180,0,0);
alphaInside = .5; // alpha value of inside

// color of the edge of the projected beam
colorEdge = make_colour_rgb(220,0,0);
alphaEdge = .8; // alpha value of edge of beam
edgeWidth = 5; // width of the bounding on the beam in pixels

// apply delta to variables
event_user(0);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// call beam modification user event and damage event

// modify beam dimensions
event_user(3);

// check for player collision and damage player
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// modify beam dimensions

if (lengthLimit &gt;= 0) {
    if (length &lt; lengthLimit) {
        length += lSpd;    
    }
} else if (lengthLimit == -1) {
    length += lSpd;
}

if (widthLimit &gt;= 0) {
    if (width &lt; widthLimit) {
        width += wSpd;    
    }
} else if (widthLimit == -1) {
    width += wSpd;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check player collision and damage player

// check whether or not the player is within the bounding box of the beam (simple collision checking)
if (collision_rectangle(posX,posX+length,posY,posY+width,obj_player_main,false,true)) {
    if (global.playerInvincible != true) { // check whether or not the player is invincible
        
        // deal damage to the player
        global.playerHealth -= damage;
        
        // call damage invulnerability activation event in player object
        with (obj_player_main) {
            event_user(5);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// remove delta from all repeatedly applied variables

damage = scrDeltaRevert(damage);

posX = scrDeltaRevert(posX);
posY = scrDeltaRevert(posY);

lSpd = scrDeltaRevert(lSpd);
wSpd = scrDeltaRevert(wSpd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// apply delta to all repeatedly applied variables

damage = scrDeltaApply(damage,true);

posX = scrDeltaApply(posX,true);
posY = scrDeltaApply(posY,true);

lSpd = scrDeltaApply(lSpd,true);
wSpd = scrDeltaApply(wSpd,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw beam

// draw inside of beam

// set color and alpha to beam inside settings
draw_set_colour(colorInside);
draw_set_alpha(alphaInside);

// draw box, not outline
draw_rectangle(posX,posY,posX+length,posY+width,false);


// draw beam edge

// set color and alpha to beam edge settings
draw_set_colour(colorEdge);
draw_set_alpha(alphaEdge);

// draw box outline
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
