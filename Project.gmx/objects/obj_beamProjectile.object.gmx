<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize variables

// damage dealt per tick to player
damage = 0;

// position beam originates from (top left corner of beam)
posX = 0; // x position
posY = 300; // y position

// angle of beam
dir = 30;

// dimensions of beam (-1 limit is unbounded)

// starting length
length = 0;
// limit on length growth
lengthLimit = -1;
// spd of length growth
lSpd = 1;

// starting width
width = 0;
// limit on width growth
widthLimit = 20;
// speed of width
wSpd = 1;

// colours and alphas of beam

// color of the inside of the projected beam
colorInside = make_colour_rgb(180,0,0);
alphaInside = .5; // alpha value of inside

// color of the edge of the projected beam
colorEdge = make_colour_rgb(220,0,0);
alphaEdge = .8; // alpha value of edge of beam
edgeWidth = 5; // width of the bounding on the beam in pixels
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// modify beam and deal damage

// modify beam dimensions
event_user(0);

// deal damage to player
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// damage player

if (point_in_rectangle(obj_player_main.x,obj_player_main.y,xOnePrime,yOnePrime,xTwoPrime,yTwoPrime)) {
    global.playerHealth -= scrDeltaApply(damage,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// modify beam dimensions

// apply delta to length and witdth increments
var l = scrDeltaApply(lSpd,true);
var w = scrDeltaApply(wSpd,true);

// if resultant is less than limit, apply length increase
if (length + l &lt; lengthLimit || lengthLimit == -1) {
    length += l;
}

// if resultant is less than limit, apply width increase
if (width + w &lt; widthLimit || widthLimit == -1) {
    width += w;
}

// change unrotated beam dimensions
var x2 = posX+scrDeltaApply(length,true);
var y2 = posY+scrDeltaApply(width,true);

// rotate beam
var p1 = scrRotatePoint(dir,posX,posY);
var p2 = scrRotatePoint(dir,x2,y2);

// rotated first corner
xOnePrime = p1[0];
yOnePrime = p1[1];

// rotated second corner
xTwoPrime = p2[0];
yTwoPrime = p2[1];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw beam

draw_set_alpha(alphaInside);
draw_set_colour(colorInside);
draw_rectangle(xOnePrime,yOnePrime,xTwoPrime,yTwoPrime,false);

draw_set_alpha(alphaEdge);
draw_set_color(colorEdge);
draw_rectangle(xOnePrime,yOnePrime,xTwoPrime,yTwoPrime,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
